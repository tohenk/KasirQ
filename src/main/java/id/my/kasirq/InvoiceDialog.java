/**
 * The MIT License (MIT)
 *
 * Copyright (c) 2020 Toha <tohenk@yahoo.com>
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of
 * this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to
 * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
 * of the Software, and to permit persons to whom the Software is furnished to do
 * so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

package id.my.kasirq;

import java.awt.Frame;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.beans.PropertyChangeListener;
import java.beans.PropertyChangeEvent;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import javax.swing.JComponent;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.event.ChangeEvent;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.event.TableColumnModelEvent;
import javax.swing.event.TableColumnModelListener;
import javax.swing.table.DefaultTableModel;

import id.my.kasirq.model.Invoice;
import id.my.kasirq.model.Item;
import id.my.kasirq.model.Product;
import id.my.kasirq.util.IconLoader;
import id.my.kasirq.util.RawPrinter;

public class InvoiceDialog extends JDialog implements ActionListener,
        KeyListener, PropertyChangeListener, TableModelListener,
        TableColumnModelListener, ListSelectionListener {

    private static InvoiceDialog instance;

    private final ArrayList<InvoiceKey> keys = new ArrayList<>();
    private final Map<String, Integer> cols = new HashMap<>();
    private Invoice inv = null;
    private boolean updating = true;
    private boolean isUpdating;

    public InvoiceDialog(Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        initializeKeys();
        initializeTableModel();
        initialize();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jFormattedTextField1 = new javax.swing.JFormattedTextField();
        jLabel2 = new javax.swing.JLabel();
        jFormattedTextField2 = new javax.swing.JFormattedTextField();
        jPanel2 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jPanel3 = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jFormattedTextField3 = new javax.swing.JFormattedTextField();
        jLabel5 = new javax.swing.JLabel();
        jFormattedTextField4 = new javax.swing.JFormattedTextField();
        jPanel5 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(java.awt.SystemColor.controlShadow));

        jLabel1.setText("Nomor");

        jFormattedTextField1.setEditable(false);

        jLabel2.setText("Tanggal");

        jFormattedTextField2.setEditable(false);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addGap(45, 45, 45)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jFormattedTextField1)
                    .addComponent(jFormattedTextField2))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jFormattedTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jFormattedTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createLineBorder(java.awt.SystemColor.controlShadow));

        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, 222, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Kode", "Nama", "Harga", "Qty", "Jumlah"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Double.class, java.lang.Integer.class, java.lang.Double.class
            };
            boolean[] canEdit = new boolean [] {
                true, false, true, true, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.setSelectionBackground(java.awt.SystemColor.info);
        jTable1.setSelectionForeground(java.awt.SystemColor.infoText);
        jScrollPane1.setViewportView(jTable1);

        jPanel3.setBorder(javax.swing.BorderFactory.createLineBorder(java.awt.SystemColor.controlShadow));

        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        jPanel4.setBorder(javax.swing.BorderFactory.createLineBorder(java.awt.SystemColor.controlShadow));

        jLabel4.setText("Bayar");

        jFormattedTextField3.setHorizontalAlignment(javax.swing.JTextField.RIGHT);

        jLabel5.setText("Kembali");

        jFormattedTextField4.setEditable(false);
        jFormattedTextField4.setHorizontalAlignment(javax.swing.JTextField.RIGHT);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jFormattedTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 30, Short.MAX_VALUE)
                        .addComponent(jFormattedTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jFormattedTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jFormattedTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel5.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createLineBorder(java.awt.SystemColor.controlShadow), javax.swing.BorderFactory.createEmptyBorder(2, 2, 2, 2)));

        jLabel6.setText(" ");

        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 676, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, 88, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jLabel6)
                .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 206, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void initialize() {
        setTitle("Invoice");
        setLocationRelativeTo(null);
        setDefaultCloseOperation(JDialog.HIDE_ON_CLOSE);
        IconLoader iconLoader = IconLoader.getInstance();
        iconLoader.setAppIcon(this);
        AppUtil.applyNumberFormatter(jFormattedTextField1);
        AppUtil.applyDateFormatter(jFormattedTextField2);
        AppUtil.applyNumberFormatter(jFormattedTextField3);
        AppUtil.applyNumberFormatter(jFormattedTextField4);
        setFocusable(true);
        setFocusTraversalKeysEnabled(false);
        addKeyListener(this);
        addWindowListener(new WindowAdapter() {
            @Override
            public void windowOpened(WindowEvent e) {
                displayLastInvoice();
            }
        });
        jLabel6.setText(getKeyLabels());
        jTable1.getModel().addTableModelListener(this);
        jTable1.getColumnModel().addColumnModelListener(this);
        jTable1.getSelectionModel().addListSelectionListener(this);
        jTable1.addKeyListener(this);
        jFormattedTextField1.addKeyListener(this);
        jFormattedTextField2.addKeyListener(this);
        jFormattedTextField3.addKeyListener(this);
        jFormattedTextField4.addKeyListener(this);
        jFormattedTextField3.addPropertyChangeListener("value", this);
        jFormattedTextField3.getDocument().addDocumentListener(
                new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent e) {
                displayPaidHint();
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                displayPaidHint();
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                displayPaidHint();
            }
        });
        setFontSize(jLabel3, 36F);
        setFontSize(jLabel7, 20F);
    }

    private void initializeKeys() {
        keys.add(new InvoiceKey("Daftar", KeyEvent.VK_F2) {
            @Override
            void run() {
            }
        });
        keys.add(new InvoiceKey("Baru", KeyEvent.VK_F4) {
            @Override
            void run() {
                if (inv != null && inv.getStatus() == Invoice.NEW) return;
                inv = new Invoice();
                inv.setId((Long) AppData.getInstance().getNewId(inv));
                inv.setTanggal(new Date());
                displayInvoice();
                if (jTable1.getRowCount() > 0) {
                    jTable1.changeSelection(0, 0, false, false);
                    jTable1.requestFocus();
                }
            }
        });
        keys.add(new InvoiceKey("Hapus Item", KeyEvent.VK_F5) {
            @Override
            void run() {
                cancelEditing();
                if (inv == null || inv.getStatus() > Invoice.DRAFT ||
                        jTable1.getSelectedRow() < 0) return;
                String kode = (String) jTable1.getValueAt(
                        jTable1.getSelectedRow(), getColumnIndex("Kode"));
                if (kode != null && !kode.isEmpty()) {
                    String nama = (String) jTable1.getValueAt(
                            jTable1.getSelectedRow(), getColumnIndex("Nama"));
                    if (JOptionPane.showConfirmDialog(instance,
                            String.format("Apakah item %s %s dihapus?",
                                    kode, nama),
                            "Konfirmasi",
                            JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
                        DefaultTableModel tm = (DefaultTableModel) jTable1
                                .getModel();
                        tm.removeRow(jTable1.getSelectedRow());
                        calcTotal();
                    }
                }
            }
        });
        keys.add(new InvoiceKey("Bayar", KeyEvent.VK_F6) {
            @Override
            void run() {
                cancelEditing();
                if (jFormattedTextField3.isEditable()) {
                    jFormattedTextField3.requestFocus();
                }
            }
        });
        keys.add(new InvoiceKey("Cetak", KeyEvent.VK_F7) {
            @Override
            void run() {
                cancelEditing();
                if (inv != null && inv.getStatus() >= Invoice.PAID) {
                    printInvoice();
                }
            }
        });
        keys.add(new InvoiceKey("Batal", KeyEvent.VK_F10) {
            @Override
            void run() {
                cancelEditing();
                if (inv != null && inv.getStatus() < Invoice.DRAFT &&
                        JOptionPane.showConfirmDialog(instance,
                        String.format("Apakah batalkan invoice nomor %d?",
                                inv.getId()),
                        "Konfirmasi",
                        JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
                    inv = null;
                    displayLastInvoice();
                }
            }
        });
        keys.add(new InvoiceKey("Hapus", KeyEvent.VK_F11) {
            @Override
            void run() {
                cancelEditing();
                if (inv != null && inv.getStatus() > Invoice.NEW &&
                        JOptionPane.showConfirmDialog(instance,
                        String.format("Hapus invoice nomor %d?", inv.getId()),
                        "Konfirmasi",
                        JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
                    AppData d = AppData.getInstance();
                    if (d.getInvoice().remove(inv)) {
                        d.getInvoice().save();
                        inv = null;
                        displayLastInvoice();
                    }
                }
            }
        });
        keys.add(new InvoiceKey("Tutup", KeyEvent.VK_F12) {
            @Override
            void run() {
                if (inv != null && inv.getStatus() <= Invoice.DRAFT) {
                    if (JOptionPane.showConfirmDialog(instance,
                        String.format("Invoice nomor %d masih dalam proses.\n" +
                                "Apakah simpan terlebih dahulu?",
                                inv.getId()),
                        "Konfirmasi",
                        JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
                        if (inv.getStatus() < Invoice.DRAFT) {
                            inv.setStatus(Invoice.DRAFT);
                        }
                        saveInvoice();
                        displayStatus();
                    } else {
                        inv = null;
                        displayLastInvoice();
                    }
                }
                setVisible(false);
            }
        });
    }
    
    private void initializeTableModel() {
        DefaultTableModel tm = (DefaultTableModel) jTable1.getModel();
        for (int i = 0; i < tm.getColumnCount(); i++) {
            cols.put(tm.getColumnName(i), i);
        }
    }

    private void setFontSize(JComponent c, Float size) {
        c.setFont(c.getFont().deriveFont(size));
    }

    private String getKeyLabels() {
        String s = new String();
        for (InvoiceKey k: this.keys) {
            if (!s.isEmpty()) {
                s += '\u2001';
            }
            s += k.getLabel();
        }
        return s;
    }

    private int getColumnIndex(String col) {
        return cols.get(col);
    }
    
    private void autoEditCell() {
        if (updating ||
                inv.getStatus() > Invoice.DRAFT ||
                jTable1.getSelectedRow() < 0 ||
                jTable1.getSelectedColumn() < 0) return;
        DefaultTableModel tm = (DefaultTableModel) jTable1.getModel();
        boolean editable = tm.isCellEditable(jTable1.getSelectedRow(),
                jTable1.getSelectedColumn());
        if (getColumnIndex("Kode") == jTable1.getSelectedColumn()) {
            String kode = (String) jTable1.getValueAt(jTable1.getSelectedRow(),
                    jTable1.getSelectedColumn());
            editable = kode == null || kode.isEmpty();
        }
        String status = null;
        if (editable) {
            jTable1.editCellAt(jTable1.getSelectedRow(),
                    jTable1.getSelectedColumn());
            switch (jTable1.getColumnName(jTable1.getSelectedColumn())) {
                case "Kode":
                    status = "Masukkan kode barang atau scan barcode";
                    break;
                case "Qty":
                    status = "Masukkan jumlah barang";
                    break;
            }
        }
        displayHint(status);
    }
    
    private void cancelEditing() {
        if (jTable1.getSelectedRow() < 0) return;
        for (int i = 0; i < jTable1.getColumnCount(); i++) {
            jTable1.getCellEditor(jTable1.getSelectedRow(), i)
                    .cancelCellEditing();
        }
    }

    private void autoMergeRows() {
        if (inv == null || inv.getStatus() > Invoice.DRAFT || jTable1.getSelectedRow() < 0 ||
                jTable1.getSelectedColumn() < 0) return;
        DefaultTableModel tm = (DefaultTableModel) jTable1.getModel();
        int i = 0;
        int kIdx = getColumnIndex("Kode");
        int qIdx = getColumnIndex("Qty");
        while (true) {
            if (i == jTable1.getRowCount()) break;
            String kode = (String) jTable1.getValueAt(i, kIdx);
            if (kode == null || kode.isEmpty()) break;
            Integer qty = (Integer) jTable1.getValueAt(i, qIdx);
            Integer qtyNew = qty;
            int j = i + 1;
            while (true) {
                if (j == jTable1.getRowCount()) break;
                String kodeNext = (String) jTable1.getValueAt(j, kIdx);
                if (kodeNext == null || kodeNext.isEmpty()) break;
                if (kodeNext.equals(kode)) {
                    Integer qtyNext = (Integer) jTable1.getValueAt(j, qIdx);
                    qtyNew += qtyNext;
                    tm.removeRow(j);
                    continue;
                }
                j++;
            }
            if (qtyNew > qty) {
                tm.setValueAt(qtyNew, i, qIdx);
            }
            i++;
        }
    }
    
    private void autoSaveItems() {
        if (inv == null || inv.getStatus() > Invoice.DRAFT) return;
        DefaultTableModel tm = (DefaultTableModel) jTable1.getModel();
        ArrayList<String> items = new ArrayList<>();
        int kIdx = getColumnIndex("Kode");
        int nIdx = getColumnIndex("Nama");
        int hIdx = getColumnIndex("Harga");
        int qIdx = getColumnIndex("Qty");
        int jIdx = getColumnIndex("Jumlah");
        for (int i = 0; i < tm.getRowCount(); i++) {
            String kode = (String) tm.getValueAt(i, kIdx);
            String nama = (String) tm.getValueAt(i, nIdx);
            Double harga = (Double) tm.getValueAt(i, hIdx);
            Integer qty = (Integer) tm.getValueAt(i, qIdx);
            Double jumlah = (Double) tm.getValueAt(i, jIdx);
            if (kode == null || kode.isEmpty() ||
                    nama == null || nama.isEmpty() ||
                    harga == null || qty == null || jumlah == null) break;
            Item item = null;
            for (Item it: inv.getItems()) {
                if (it.getKode().equals(kode)) {
                    item = it;
                    break;
                }
            }
            if (item == null) {
                item = new Item();
                item.setKode(kode);
                inv.getItems().add(item);
            }
            item.setNama(nama);
            item.setHarga(harga);
            item.setQty(qty);
            item.setTotal(jumlah);
            items.add(kode);
        }
        for (Item it: inv.getItems()) {
            if (!items.contains(it.getKode())) {
                inv.getItems().remove(it);
            }
        }
    }

    private void addBlank(boolean fireChange) {
        if (inv.getStatus() > Invoice.DRAFT) return;
        if (jTable1.getRowCount() > 0) {
            String kode = (String) jTable1.getValueAt(jTable1.getRowCount() - 1,
                    0);
            if (kode == null || kode.isEmpty()) return;
        }
        DefaultTableModel tm = (DefaultTableModel) jTable1.getModel();
        Object[] row = {null, null, null, null, null};
        tm.addRow(row);
        if (fireChange) tm.fireTableDataChanged();
    }

    private void blankRow(int row) {
        SafeValue[] values = new SafeValue[jTable1.getColumnCount()];
        for (int i = 0; i < jTable1.getColumnCount(); i++) {
            values[i] = new SafeValue(row, i, null);
        }
        safeUpdate(values);
    }

    private void beginUpdating() {
        isUpdating = updating;
        updating = true;
    }
    
    private void endUpdating() {
        updating = isUpdating;
    }
    
    private void safeUpdate(SafeValue[] values) {
        beginUpdating();
        try {
            DefaultTableModel tm = (DefaultTableModel) jTable1.getModel();
            for (SafeValue v: values) {
                tm.setValueAt(v.value, v.row, v.column);
            }
        }
        catch (Exception e) {
            e.printStackTrace();
        }
        endUpdating();
    }
    
    private Double sumTotal() {
        double total = 0;
        int jIdx = getColumnIndex("Jumlah");
        for (int i = 0; i < jTable1.getRowCount(); i++) {
            Double jumlah = (Double) jTable1.getValueAt(i, jIdx);
            if (jumlah != null) total += jumlah;
        }
        return total;
    }
    
    private void calcTotal() {
        if (inv != null && inv.getStatus() < Invoice.PAID) {
            inv.setTotal(sumTotal());
            displayTotal();
        }
    }
    
    private void updatePaidStatus() {
        jFormattedTextField3.setEditable(inv != null &&
                inv.getStatus() <= Invoice.PAID);
    }

    private void displayHint(String hint) {
        jLabel7.setText(hint);
    }

    private void displayPaidHint() {
        if (updating || (inv != null && inv.getStatus() > Invoice.PAID)) return;
        String paid = jFormattedTextField3.getText();
        if (!paid.isEmpty()) {
            Number value = AppUtil.getNumber(paid);
            if (jFormattedTextField3.getValue() != value) {
                displayHint(AppUtil.formatNumber(value));
            }
        }
    }

    private void displayStatus() {
        String status = null;
        if (inv != null) {
            switch (inv.getStatus()) {
                case Invoice.NEW:
                    status = "BARU";
                    break;
                case Invoice.DRAFT:
                    status = "DRAFT";
                    break;
                case Invoice.PAID:
                    status = "DIBAYAR";
                    break;
                case Invoice.PRINTED:
                    status = "DICETAK";
                    break;
            }
        }
        jLabel8.setText(status);
    }

    private void displayTotal() {
        Double total = null;
        if (inv != null) {
            total = inv.getTotal() != null ? inv.getTotal() : 0;
        }
        jLabel3.setText(AppUtil.formatNumber(total));
    }

    private void displayInvoice() {
        updating = true;
        try {
            jFormattedTextField1.setValue(inv != null ? inv.getId() : null);
            jFormattedTextField2.setValue(inv != null ? inv.getTanggal(): null);
            jFormattedTextField3.setValue(inv != null ? inv.getBayar(): null);
            jFormattedTextField4.setValue(inv != null ? inv.getKembali(): null);
            DefaultTableModel tm = (DefaultTableModel) jTable1.getModel();
            while (tm.getRowCount() > 0) {
                tm.removeRow(0);
            }
            if (inv != null) {
                for (Item i: inv.getItems()) {
                    Object[] row = {
                        i.getKode(),
                        i.getNama(),
                        i.getTotal(),
                        i.getQty(),
                        i.getSumTotal()
                    };
                    tm.addRow(row);
                }
                addBlank(false);
            }
            tm.fireTableDataChanged();
            updatePaidStatus();
            displayTotal();
            displayStatus();
            displayHint(null);
        }
        catch (Exception e) {
            e.printStackTrace();
        }
        updating = false;
    }
    
    private void displayLastInvoice() {
        AppData d = AppData.getInstance();
        if (inv == null && d.getInvoice().getLast() != null) {
            inv = d.getInvoice().getLast();
        }
        displayInvoice();
    }

    private boolean saveInvoice() {
        if (inv != null) {
            AppData d = AppData.getInstance();
            if (d.getInvoice().addOrUpdate(inv)) {
                inv.audit(d.getActiveUser() != null ?
                        d.getActiveUser().getName() : null);
                d.getInvoice().save();
                return true;
            }
        }
        return false;
    }

    private void printInvoice() {
        AppData d = AppData.getInstance();
        String invPrinter = (String) d.getConfig()
                .get(AppData.CFG_INVOICE_PRINTER);
        String invDriver = (String) d.getConfig()
                .get(AppData.CFG_INVOICE_PRINTER_DRIVER);
        String invModel = (String) d.getConfig()
                .get(AppData.CFG_INVOICE_MODEL);
        if (invPrinter == null || invPrinter.isEmpty() ||
                invDriver == null || invDriver.isEmpty() ||
                invModel == null || invModel.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Pengaturan invoice perlu " +
                    "dilakukan terlebih dahulu!", "Perhatian",
                    JOptionPane.WARNING_MESSAGE);
        } else {
            RawPrinter rp = RawPrinter.getInstance();
            if (rp.getPrintService() == null || !rp.getPrintService().getName()
                    .equals(invPrinter)) {
                rp.setPrintService(invPrinter);
            }
            if (rp.getDriver()== null || !rp.getDriver().getName()
                    .equals(invDriver)) {
                rp.setDriver(invDriver);
            }
            Invoices ivs = Invoices.getInstance();
            if (ivs.getModel() == null || !ivs.getModel().getName()
                    .equals(invModel)) {
                ivs.setModel(invModel);
            }
            if (ivs.getModel() != null) {
                String invNote = (String) d.getConfig()
                        .get(AppData.CFG_INVOICE_NOTE);
                if (!ivs.getModel().getName().equals(invNote)) {
                    ivs.getModel().setNote(invNote);
                }
                ivs.getModel().print(inv);
                if (inv.getStatus() < Invoice.PRINTED) {
                    inv.setStatus(Invoice.PRINTED);
                    saveInvoice();
                    updatePaidStatus();
                    displayStatus();
                    displayHint("Invoice selesai dicetak");
                }
            } else {
                JOptionPane.showMessageDialog(this, "Invoice tidak dapat dicetak!",
                        "Perhatian", JOptionPane.WARNING_MESSAGE);
            }
        }
    }

    @Override
    public void actionPerformed(ActionEvent e) {
    }

    @Override
    public void keyTyped(KeyEvent e) {
    }
    
    @Override
    public void keyPressed(KeyEvent e) {
    }
    
    @Override
    public void keyReleased(KeyEvent e) {
        for (InvoiceKey k: keys) {
            if (k.keyCode == e.getKeyCode()) {
                k.run();
                break;
            }
        }
    }

    @Override
    public void tableChanged(TableModelEvent e) {
        if (updating || inv.getStatus() > Invoice.DRAFT) return;
        DefaultTableModel tm = (DefaultTableModel) e.getSource();
        String col = tm.getColumnName(e.getColumn());
        AppData d = AppData.getInstance();
        String kode;
        Double harga;
        Integer qty;
        switch (col) {
            case "Kode":
                kode = (String) tm.getValueAt(e.getLastRow(), e.getColumn());
                if (kode != null && !kode.isEmpty()) {
                    Product pr = d.getProduct().get(kode);
                    if (pr == null && d.getBarcodes().containsKey(kode)) {
                        pr = d.getBarcodes().get(kode);
                    }
                    if (pr != null) {
                        if (!pr.getKode().equals(kode)) {
                            kode = pr.getKode();
                            safeUpdate(new SafeValue[] {
                                new SafeValue(e.getLastRow(), e.getColumn(),
                                        kode)
                            });
                        }
                        qty = (Integer) tm.getValueAt(e.getLastRow(),
                                getColumnIndex("Qty"));
                        if (qty == null) {
                            safeUpdate(new SafeValue[] {
                                new SafeValue(e.getLastRow(),
                                        getColumnIndex("Nama"),
                                        pr.getNama()),
                                new SafeValue(e.getLastRow(),
                                        getColumnIndex("Harga"),
                                        pr.getTotal()),
                            });
                            tm.setValueAt(1, e.getLastRow(),
                                    getColumnIndex("Qty"));
                            addBlank(true);
                        }
                    } else {
                        JOptionPane.showMessageDialog(this,
                                String.format("Produk dengan kode %s tidak ada!",
                                        kode),
                                "Kesalahan", JOptionPane.ERROR_MESSAGE);
                        blankRow(e.getLastRow());
                        jTable1.changeSelection(e.getLastRow(), e.getColumn(),
                                false, false);
                    }
                }
                break;
            case "Harga":
            case "Qty":
                harga = (Double) tm.getValueAt(e.getLastRow(),
                        getColumnIndex("Harga"));
                qty = (Integer) tm.getValueAt(e.getLastRow(),
                        getColumnIndex("Qty"));
                if (harga != null && qty != null) {
                    tm.setValueAt(harga * qty, e.getLastRow(),
                            getColumnIndex("Jumlah"));
                }
                break;
            case "Jumlah":
                calcTotal();
                break;
            default:
                break;
        }
    }

    @Override
    public void columnAdded(TableColumnModelEvent e){
    }

    @Override
    public void columnRemoved(TableColumnModelEvent e) {
    }

    @Override
    public void columnMoved(TableColumnModelEvent e) {
    }

    @Override
    public void columnMarginChanged(ChangeEvent e) {
    }

    @Override
    public void columnSelectionChanged(ListSelectionEvent e) {
        autoEditCell();
    }

    @Override
    public void valueChanged(ListSelectionEvent e) {
        autoMergeRows();
        autoSaveItems();
        autoEditCell();
    }

    @Override
    public void propertyChange(PropertyChangeEvent e) {
        if (updating || inv == null) return;
        if (e.getSource() == jFormattedTextField3) {
            Object v = jFormattedTextField3.getValue();
            if (v != null) {
                Double value = Double.valueOf(String.valueOf(v));
                inv.setBayar(value);
                inv.setKembali(value - inv.getTotal());
                if (inv.getStatus() < Invoice.PAID) inv.setStatus(Invoice.PAID);
                jFormattedTextField4.setValue(inv.getKembali());
                saveInvoice();
                updatePaidStatus();
                displayStatus();
                displayHint(null);
            }
        }
    }

    private class InvoiceKey {
        String label;
        int keyCode;

        public InvoiceKey(String l, int code) {
            label = l;
            keyCode = code;
        }

        String getLabel() {
            return String.format("%s \u2013 %s", KeyEvent.getKeyText(keyCode),
                    label);
        }

        void run() {
        }
    }
    
    private class SafeValue {
        int row;
        int column;
        Object value;

        public SafeValue(int r, int c, Object v) {
            row = r;
            column = c;
            value = v;
        }
    }

    public static InvoiceDialog getInstance() {
        if (instance == null) {
            instance = new InvoiceDialog(new JFrame(), true);
        }
        return instance;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JFormattedTextField jFormattedTextField1;
    private javax.swing.JFormattedTextField jFormattedTextField2;
    private javax.swing.JFormattedTextField jFormattedTextField3;
    private javax.swing.JFormattedTextField jFormattedTextField4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}
