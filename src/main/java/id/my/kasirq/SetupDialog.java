/**
 * The MIT License (MIT)
 *
 * Copyright (c) 2020 Toha <tohenk@yahoo.com>
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of
 * this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to
 * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
 * of the Software, and to permit persons to whom the Software is furnished to do
 * so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

package id.my.kasirq;

import java.awt.Frame;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import javax.print.PrintService;
import javax.print.PrintServiceLookup;
import javax.swing.JDialog;
import javax.swing.JFrame;

import id.my.kasirq.util.IconLoader;
import id.my.kasirq.util.RawPrinter;
import javax.swing.JComboBox;
import javax.swing.JTextField;

public class SetupDialog extends JDialog implements ActionListener {
    
    private static SetupDialog instance;

    public SetupDialog(Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        initialize();
        listPrinters();
        listDrivers();
        listInvoices();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox<>();
        jComboBox2 = new javax.swing.JComboBox<>();
        jComboBox3 = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel2.setText("Mode Printer");

        jButton1.setText("Oke");
        jButton1.setActionCommand("OK");

        jButton2.setText("Batal");
        jButton2.setActionCommand("CANCEL");

        jLabel1.setText("Printer Invoice");

        jLabel3.setText("Model Invoice");

        jLabel4.setText("Catatan Invoice");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(191, Short.MAX_VALUE)
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton2)
                .addGap(139, 139, 139))
            .addGroup(layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jComboBox3, javax.swing.GroupLayout.Alignment.TRAILING, 0, 298, Short.MAX_VALUE)
                    .addComponent(jComboBox2, javax.swing.GroupLayout.Alignment.TRAILING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.Alignment.TRAILING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jTextField1))
                .addGap(24, 24, 24))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jComboBox3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(21, 21, 21))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void initialize() {
        setTitle("Pengaturan");
        setLocationRelativeTo(null);
        setDefaultCloseOperation(JDialog.HIDE_ON_CLOSE);
        getRootPane().setDefaultButton(jButton1);
        IconLoader iconLoader = IconLoader.getInstance();
        iconLoader.register(this, "OK", "check");
        iconLoader.register(this, "CANCEL", "times");
        iconLoader.setAppIcon(this);
        iconLoader.setIcon(this, jButton1);
        iconLoader.setIcon(this, jButton2);
        jButton1.addActionListener(this);
        jButton2.addActionListener(this);
        addWindowListener(new WindowAdapter() {
            @Override
            public void windowOpened(WindowEvent e) {
                displaySetup();
            }
        });
    }

    private void listPrinters() {
        jComboBox1.removeAllItems();
        for (PrintService ps:
                PrintServiceLookup.lookupPrintServices(null, null)) {
            jComboBox1.addItem(ps.getName());
        }
    }

    private void listDrivers() {
        jComboBox2.removeAllItems();
        for (RawPrinter.Driver d: RawPrinter.getInstance().getDrivers()) {
            jComboBox2.addItem(d.getName());
        }
    }

    private void listInvoices() {
        jComboBox3.removeAllItems();
        for (Invoices.Model m: Invoices.getInstance().getModels()) {
            jComboBox3.addItem(m.getName());
        }
    }
    
    private void setComboValue(JComboBox<String> combo, String config) {
        AppData d = AppData.getInstance();
        String value = (String) d.getConfig().get(config);
        if (value != null && !value.isEmpty())
            combo.setSelectedItem(value);
    }

    private void setTextValue(JTextField tf, String config) {
        AppData d = AppData.getInstance();
        tf.setText((String) d.getConfig().get(config));
    }

    private boolean applyComboValue(JComboBox<String> combo, String config) {
        AppData d = AppData.getInstance();
        Object value = combo.getSelectedItem();
        if (value != null) {
            d.getConfig().set(config, value);
            return true;
        }
        return false;
    }

    private boolean applyTextValue(JTextField tf, String config) {
        AppData d = AppData.getInstance();
        d.getConfig().set(config, tf.getText());
        return true;
    }

    private void displaySetup() {
        setComboValue(jComboBox1, AppData.CFG_INVOICE_PRINTER);
        setComboValue(jComboBox2, AppData.CFG_INVOICE_PRINTER_DRIVER);
        setComboValue(jComboBox3, AppData.CFG_INVOICE_MODEL);
        setTextValue(jTextField1, AppData.CFG_INVOICE_NOTE);
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        if (e.getActionCommand().equals("OK")) {
            AppData d = AppData.getInstance();
            int count = 0;
            if (applyComboValue(jComboBox1, AppData.CFG_INVOICE_PRINTER))
                count++;
            if (applyComboValue(jComboBox2, AppData.CFG_INVOICE_PRINTER_DRIVER))
                count++;
            if (applyComboValue(jComboBox3, AppData.CFG_INVOICE_MODEL))
                count++;
            if (applyTextValue(jTextField1, AppData.CFG_INVOICE_NOTE))
                count++;
            if (count > 0) d.getConfig().save();
            setVisible(false);
        }
        if (e.getActionCommand().equals("CANCEL")) {
            setVisible(false);
        }
    }

    public static SetupDialog getInstance() {
        if (instance == null) {
            instance = new SetupDialog(new JFrame(), true);
        }
        return instance;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JComboBox<String> jComboBox2;
    private javax.swing.JComboBox<String> jComboBox3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables
}
